// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	decimal "github.com/shopspring/decimal"
	ctx "github.com/x-xyz/goapi/base/ctx"

	domain "github.com/x-xyz/goapi/domain"

	mock "github.com/stretchr/testify/mock"
)

// PriceFormatter is an autogenerated mock type for the PriceFormatter type
type PriceFormatter struct {
	mock.Mock
}

// GetPrices provides a mock function with given fields: _a0, chainId, token, value
func (_m *PriceFormatter) GetPrices(_a0 ctx.Ctx, chainId domain.ChainId, token domain.Address, value *big.Int) (decimal.Decimal, float64, float64, error) {
	ret := _m.Called(_a0, chainId, token, value)

	var r0 decimal.Decimal
	if rf, ok := ret.Get(0).(func(ctx.Ctx, domain.ChainId, domain.Address, *big.Int) decimal.Decimal); ok {
		r0 = rf(_a0, chainId, token, value)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func(ctx.Ctx, domain.ChainId, domain.Address, *big.Int) float64); ok {
		r1 = rf(_a0, chainId, token, value)
	} else {
		r1 = ret.Get(1).(float64)
	}

	var r2 float64
	if rf, ok := ret.Get(2).(func(ctx.Ctx, domain.ChainId, domain.Address, *big.Int) float64); ok {
		r2 = rf(_a0, chainId, token, value)
	} else {
		r2 = ret.Get(2).(float64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(ctx.Ctx, domain.ChainId, domain.Address, *big.Int) error); ok {
		r3 = rf(_a0, chainId, token, value)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetPricesFromDisplayPrice provides a mock function with given fields: _a0, chainId, token, displayPrice
func (_m *PriceFormatter) GetPricesFromDisplayPrice(_a0 ctx.Ctx, chainId domain.ChainId, token domain.Address, displayPrice decimal.Decimal) (float64, float64, error) {
	ret := _m.Called(_a0, chainId, token, displayPrice)

	var r0 float64
	if rf, ok := ret.Get(0).(func(ctx.Ctx, domain.ChainId, domain.Address, decimal.Decimal) float64); ok {
		r0 = rf(_a0, chainId, token, displayPrice)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func(ctx.Ctx, domain.ChainId, domain.Address, decimal.Decimal) float64); ok {
		r1 = rf(_a0, chainId, token, displayPrice)
	} else {
		r1 = ret.Get(1).(float64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(ctx.Ctx, domain.ChainId, domain.Address, decimal.Decimal) error); ok {
		r2 = rf(_a0, chainId, token, displayPrice)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPricesFromDisplayPriceString provides a mock function with given fields: _a0, chainId, token, displayPriceString
func (_m *PriceFormatter) GetPricesFromDisplayPriceString(_a0 ctx.Ctx, chainId domain.ChainId, token domain.Address, displayPriceString string) (float64, float64, error) {
	ret := _m.Called(_a0, chainId, token, displayPriceString)

	var r0 float64
	if rf, ok := ret.Get(0).(func(ctx.Ctx, domain.ChainId, domain.Address, string) float64); ok {
		r0 = rf(_a0, chainId, token, displayPriceString)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func(ctx.Ctx, domain.ChainId, domain.Address, string) float64); ok {
		r1 = rf(_a0, chainId, token, displayPriceString)
	} else {
		r1 = ret.Get(1).(float64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(ctx.Ctx, domain.ChainId, domain.Address, string) error); ok {
		r2 = rf(_a0, chainId, token, displayPriceString)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewPriceFormatter interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriceFormatter creates a new instance of PriceFormatter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriceFormatter(t mockConstructorTestingTNewPriceFormatter) *PriceFormatter {
	mock := &PriceFormatter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
