// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	ctx "github.com/x-xyz/goapi/base/ctx"
	domain "github.com/x-xyz/goapi/domain"

	erc1155 "github.com/x-xyz/goapi/domain/erc1155"

	mock "github.com/stretchr/testify/mock"
)

// HoldingRepo is an autogenerated mock type for the HoldingRepo type
type HoldingRepo struct {
	mock.Mock
}

// CountUniqueOwner provides a mock function with given fields: c, chainId, address
func (_m *HoldingRepo) CountUniqueOwner(c ctx.Ctx, chainId domain.ChainId, address domain.Address) (int64, error) {
	ret := _m.Called(c, chainId, address)

	var r0 int64
	if rf, ok := ret.Get(0).(func(ctx.Ctx, domain.ChainId, domain.Address) int64); ok {
		r0 = rf(c, chainId, address)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, domain.ChainId, domain.Address) error); ok {
		r1 = rf(c, chainId, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: c, value
func (_m *HoldingRepo) Create(c ctx.Ctx, value erc1155.Holding) error {
	ret := _m.Called(c, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, erc1155.Holding) error); ok {
		r0 = rf(c, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c, id
func (_m *HoldingRepo) Delete(c ctx.Ctx, id erc1155.HoldingId) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, erc1155.HoldingId) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: c, opts
func (_m *HoldingRepo) FindAll(c ctx.Ctx, opts ...erc1155.FindAllOptionsFunc) ([]*erc1155.Holding, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*erc1155.Holding
	if rf, ok := ret.Get(0).(func(ctx.Ctx, ...erc1155.FindAllOptionsFunc) []*erc1155.Holding); ok {
		r0 = rf(c, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*erc1155.Holding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, ...erc1155.FindAllOptionsFunc) error); ok {
		r1 = rf(c, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: c, id
func (_m *HoldingRepo) FindOne(c ctx.Ctx, id erc1155.HoldingId) (*erc1155.Holding, error) {
	ret := _m.Called(c, id)

	var r0 *erc1155.Holding
	if rf, ok := ret.Get(0).(func(ctx.Ctx, erc1155.HoldingId) *erc1155.Holding); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*erc1155.Holding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, erc1155.HoldingId) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Increment provides a mock function with given fields: c, id, value
func (_m *HoldingRepo) Increment(c ctx.Ctx, id erc1155.HoldingId, value int64) (*erc1155.Holding, error) {
	ret := _m.Called(c, id, value)

	var r0 *erc1155.Holding
	if rf, ok := ret.Get(0).(func(ctx.Ctx, erc1155.HoldingId, int64) *erc1155.Holding); ok {
		r0 = rf(c, id, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*erc1155.Holding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, erc1155.HoldingId, int64) error); ok {
		r1 = rf(c, id, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHoldingRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewHoldingRepo creates a new instance of HoldingRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHoldingRepo(t mockConstructorTestingTNewHoldingRepo) *HoldingRepo {
	mock := &HoldingRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
