// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	ctx "github.com/x-xyz/goapi/base/ctx"
	domain "github.com/x-xyz/goapi/domain"

	mock "github.com/stretchr/testify/mock"
)

// TrackerStateRepo is an autogenerated mock type for the TrackerStateRepo type
type TrackerStateRepo struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1, _a2
func (_m *TrackerStateRepo) Get(_a0 ctx.Ctx, _a1 domain.ChainId, _a2 domain.Address) (*domain.TrackerState, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *domain.TrackerState
	if rf, ok := ret.Get(0).(func(ctx.Ctx, domain.ChainId, domain.Address) *domain.TrackerState); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TrackerState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, domain.ChainId, domain.Address) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *TrackerStateRepo) Store(_a0 ctx.Ctx, _a1 *domain.TrackerState) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, *domain.TrackerState) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *TrackerStateRepo) Update(_a0 ctx.Ctx, _a1 *domain.TrackerState) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, *domain.TrackerState) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
