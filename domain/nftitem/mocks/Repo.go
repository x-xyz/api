// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	ctx "github.com/x-xyz/goapi/base/ctx"
	domain "github.com/x-xyz/goapi/domain"

	mock "github.com/stretchr/testify/mock"

	nftitem "github.com/x-xyz/goapi/domain/nftitem"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// Count provides a mock function with given fields: c, opts
func (_m *Repo) Count(c ctx.Ctx, opts ...nftitem.FindAllOptionsFunc) (int, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(ctx.Ctx, ...nftitem.FindAllOptionsFunc) int); ok {
		r0 = rf(c, opts...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, ...nftitem.FindAllOptionsFunc) error); ok {
		r1 = rf(c, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *Repo) Create(_a0 ctx.Ctx, _a1 *nftitem.NftItem) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, *nftitem.NftItem) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecreaseSupply provides a mock function with given fields: c, id, n
func (_m *Repo) DecreaseSupply(c ctx.Ctx, id nftitem.Id, n int) error {
	ret := _m.Called(c, id, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, nftitem.Id, int) error); ok {
		r0 = rf(c, id, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: c, opts
func (_m *Repo) FindAll(c ctx.Ctx, opts ...nftitem.FindAllOptionsFunc) ([]*nftitem.NftItem, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*nftitem.NftItem
	if rf, ok := ret.Get(0).(func(ctx.Ctx, ...nftitem.FindAllOptionsFunc) []*nftitem.NftItem); ok {
		r0 = rf(c, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*nftitem.NftItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, ...nftitem.FindAllOptionsFunc) error); ok {
		r1 = rf(c, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: c, chainId, contract, tokenId
func (_m *Repo) FindOne(c ctx.Ctx, chainId domain.ChainId, contract domain.Address, tokenId domain.TokenId) (*nftitem.NftItem, error) {
	ret := _m.Called(c, chainId, contract, tokenId)

	var r0 *nftitem.NftItem
	if rf, ok := ret.Get(0).(func(ctx.Ctx, domain.ChainId, domain.Address, domain.TokenId) *nftitem.NftItem); ok {
		r0 = rf(c, chainId, contract, tokenId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nftitem.NftItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, domain.ChainId, domain.Address, domain.TokenId) error); ok {
		r1 = rf(c, chainId, contract, tokenId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseLikeCount provides a mock function with given fields: c, id, count
func (_m *Repo) IncreaseLikeCount(c ctx.Ctx, id nftitem.Id, count int) (int32, error) {
	ret := _m.Called(c, id, count)

	var r0 int32
	if rf, ok := ret.Get(0).(func(ctx.Ctx, nftitem.Id, int) int32); ok {
		r0 = rf(c, id, count)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, nftitem.Id, int) error); ok {
		r1 = rf(c, id, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseSupply provides a mock function with given fields: c, id, n
func (_m *Repo) IncreaseSupply(c ctx.Ctx, id nftitem.Id, n int) error {
	ret := _m.Called(c, id, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, nftitem.Id, int) error); ok {
		r0 = rf(c, id, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncreaseViewCount provides a mock function with given fields: c, id, count
func (_m *Repo) IncreaseViewCount(c ctx.Ctx, id nftitem.Id, count int) (int32, error) {
	ret := _m.Called(c, id, count)

	var r0 int32
	if rf, ok := ret.Get(0).(func(ctx.Ctx, nftitem.Id, int) int32); ok {
		r0 = rf(c, id, count)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, nftitem.Id, int) error); ok {
		r1 = rf(c, id, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: c, id, value
func (_m *Repo) Patch(c ctx.Ctx, id nftitem.Id, value nftitem.PatchableNftItem) error {
	ret := _m.Called(c, id, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, nftitem.Id, nftitem.PatchableNftItem) error); ok {
		r0 = rf(c, id, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshActiveListings provides a mock function with given fields: c, id
func (_m *Repo) RefreshActiveListings(c ctx.Ctx, id nftitem.Id) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, nftitem.Id) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepo(t mockConstructorTestingTNewRepo) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
