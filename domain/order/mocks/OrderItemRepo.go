// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	ctx "github.com/x-xyz/goapi/base/ctx"

	order "github.com/x-xyz/goapi/domain/order"
)

// OrderItemRepo is an autogenerated mock type for the OrderItemRepo type
type OrderItemRepo struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: _a0, opts
func (_m *OrderItemRepo) FindAll(_a0 ctx.Ctx, opts ...order.OrderItemFindAllOptionsFunc) ([]*order.OrderItem, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*order.OrderItem
	if rf, ok := ret.Get(0).(func(ctx.Ctx, ...order.OrderItemFindAllOptionsFunc) []*order.OrderItem); ok {
		r0 = rf(_a0, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, ...order.OrderItemFindAllOptionsFunc) error); ok {
		r1 = rf(_a0, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: _a0, itemId
func (_m *OrderItemRepo) FindOne(_a0 ctx.Ctx, itemId order.OrderItemId) (*order.OrderItem, error) {
	ret := _m.Called(_a0, itemId)

	var r0 *order.OrderItem
	if rf, ok := ret.Get(0).(func(ctx.Ctx, order.OrderItemId) *order.OrderItem); ok {
		r0 = rf(_a0, itemId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, order.OrderItemId) error); ok {
		r1 = rf(_a0, itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneOrder provides a mock function with given fields: _a0, orderHash
func (_m *OrderItemRepo) FindOneOrder(_a0 ctx.Ctx, orderHash string) (*order.Order, error) {
	ret := _m.Called(_a0, orderHash)

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(ctx.Ctx, string) *order.Order); ok {
		r0 = rf(_a0, orderHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, string) error); ok {
		r1 = rf(_a0, orderHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAll provides a mock function with given fields: _a0, opts
func (_m *OrderItemRepo) RemoveAll(_a0 ctx.Ctx, opts ...order.OrderItemFindAllOptionsFunc) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, ...order.OrderItemFindAllOptionsFunc) error); ok {
		r0 = rf(_a0, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, itemId, patchalbe
func (_m *OrderItemRepo) Update(_a0 ctx.Ctx, itemId order.OrderItemId, patchalbe order.OrderItemPatchable) error {
	ret := _m.Called(_a0, itemId, patchalbe)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, order.OrderItemId, order.OrderItemPatchable) error); ok {
		r0 = rf(_a0, itemId, patchalbe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: _a0, orderItem
func (_m *OrderItemRepo) Upsert(_a0 ctx.Ctx, orderItem *order.OrderItem) error {
	ret := _m.Called(_a0, orderItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.Ctx, *order.OrderItem) error); ok {
		r0 = rf(_a0, orderItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderItemRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderItemRepo creates a new instance of OrderItemRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderItemRepo(t mockConstructorTestingTNewOrderItemRepo) *OrderItemRepo {
	mock := &OrderItemRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
