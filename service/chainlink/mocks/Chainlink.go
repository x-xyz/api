// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	big "math/big"

	ctx "github.com/x-xyz/goapi/base/ctx"

	domain "github.com/x-xyz/goapi/domain"

	mock "github.com/stretchr/testify/mock"
)

// Chainlink is an autogenerated mock type for the Chainlink type
type Chainlink struct {
	mock.Mock
}

// GetLatestAnswer provides a mock function with given fields: c, chainId, feedAddress
func (_m *Chainlink) GetLatestAnswer(c ctx.Ctx, chainId domain.ChainId, feedAddress domain.Address) (*big.Int, error) {
	ret := _m.Called(c, chainId, feedAddress)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(ctx.Ctx, domain.ChainId, domain.Address) *big.Int); ok {
		r0 = rf(c, chainId, feedAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, domain.ChainId, domain.Address) error); ok {
		r1 = rf(c, chainId, feedAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestAnswerAt provides a mock function with given fields: c, chainId, feedAddress, blk
func (_m *Chainlink) GetLatestAnswerAt(c ctx.Ctx, chainId domain.ChainId, feedAddress domain.Address, blk *big.Int) (*big.Int, error) {
	ret := _m.Called(c, chainId, feedAddress, blk)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(ctx.Ctx, domain.ChainId, domain.Address, *big.Int) *big.Int); ok {
		r0 = rf(c, chainId, feedAddress, blk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ctx.Ctx, domain.ChainId, domain.Address, *big.Int) error); ok {
		r1 = rf(c, chainId, feedAddress, blk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
